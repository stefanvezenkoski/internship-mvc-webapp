@model InternshipCompaniesManager.Models.RegisterViewModel
@{
    ViewBag.Title = "Регистрација";
    Layout = null;
}

<!DOCTYPE html>
<html lang="mk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Internship Companies Manager</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4a6fa5;
            --secondary: #166088;
            --accent: #4cb5ae;
            --light: #f8f9fa;
            --dark: #2c3e50;
            --gradient-start: #4a6fa5;
            --gradient-end: #166088;
            --success: #28a745;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .register-container {
            display: flex;
            width: 100%;
            max-width: 1000px;
            min-height: 600px;
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.1);
        }

        .register-left {
            flex: 1;
            background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
            color: white;
            padding: 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

            .register-left::before {
                content: '';
                position: absolute;
                top: -50px;
                right: -40px;
                width: 200px;
                height: 200px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.1);
            }

            .register-left::after {
                content: '';
                position: absolute;
                bottom: -71px;
                transform: rotate(43deg);
                left: -88px;
                width: 400px;
                height: 400px;
                border-radius: 50%;
                opacity: 0.3;
                background: url('@Url.Content("~/logo1.png")') center/cover no-repeat;
            }

        .logo {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 30px;
            display: flex;
            align-items: center;
        }

        .logo i {
            margin-right: 10px;
            font-size: 32px;
        }

        .welcome-text h1 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .welcome-text p {
            font-size: 16px;
            opacity: 0.9;
            line-height: 1.6;
            margin-bottom: 30px;
        }

        .features {
            margin-top: 30px;
        }

        .feature {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .feature i {
            font-size: 20px;
            margin-right: 15px;
            background: rgba(255, 255, 255, 0.2);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .feature span {
            font-size: 15px;
        }

        .register-right {
            flex: 1;
            padding: 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
        }

        .register-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .register-header h2 {
            font-size: 28px;
            color: var(--dark);
            font-weight: 600;
            margin-bottom: 10px;
        }

        .register-header p {
            color: #6c757d;
            font-size: 15px;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(74, 111, 165, 0.2);
            background: white;
        }

        .floating-label {
            position: absolute;
            top: 15px;
            left: 20px;
            font-size: 16px;
            color: #6c757d;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .form-control:focus + .floating-label,
        .form-control:not(:placeholder-shown) + .floating-label {
            top: -10px;
            left: 15px;
            font-size: 12px;
            background: white;
            padding: 0 8px;
            color: var(--primary);
        }

        .password-strength {
            margin-top: 5px;
            height: 5px;
            border-radius: 5px;
            background: #e0e0e0;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 5px;
        }

        .password-weak .password-strength-bar {
            width: 33%;
            background: #dc3545;
        }

        .password-medium .password-strength-bar {
            width: 66%;
            background: #ffc107;
        }

        .password-strong .password-strength-bar {
            width: 100%;
            background: var(--success);
        }

        .password-requirements {
            margin-top: 10px;
            font-size: 12px;
            color: #6c757d;
        }

        .requirement {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .requirement i {
            margin-right: 5px;
            font-size: 10px;
        }

        .requirement.met {
            color: var(--success);
        }

        .btn-register {
            background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
            color: white;
            border: none;
            padding: 15px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin-bottom: 20px;
        }

        .btn-register:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .links {
            text-align: center;
            margin-top: 20px;
        }

        .links a {
            color: var(--primary);
            text-decoration: none;
            font-size: 14px;
            transition: color 0.3s ease;
        }

        .links a:hover {
            color: var(--secondary);
            text-decoration: underline;
        }

        .validation-error {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: block;
        }

        .password-toggle {
            position: absolute;
            right: 15px;
            top: 15px;
            cursor: pointer;
            color: #6c757d;
        }

        /* Responsive styles */
        @@media (max-width: 768px) {
            .register-container {
                flex-direction: column;
                max-width: 100%;
            }

            .register-left {
                padding: 30px 20px;
            }

            .register-right {
                padding: 30px 20px;
            }
        }

        /* Animation */
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .register-right {
            animation: fadeIn 0.8s ease;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="register-left">
            <div class="logo">
                <i>                <img style="max-width:50px; max-height:auto;" src="~/logo1.png" alt="Alternate Text" />
</i> ICM
            </div>
            <div class="welcome-text">
                <h1>Придружи ни се!</h1>
                <p>Регистрирај се за да ги откриеш сите можности за студентска пракса и да ја започнеш твојата кариера.</p>
            </div>
            <div class="features">
                <div class="feature">
                    <i class="fas fa-search"></i>
                    <span>Пребарај меѓу стотици компании</span>
                </div>
                <div class="feature">
                    <i class="fas fa-file-alt"></i>
                    <span>Аплицирај за практика онлајн</span>
                </div>
                <div class="feature">
                    <i class="fas fa-briefcase"></i>
                    <span>Следи ги твоите апликации</span>
                </div>
            </div>
        </div>

        <div class="register-right">
            <div class="register-header">
                <h2>Креирај нова сметка</h2>
                <p>Пополнете ги деталите за да креирате профил</p>
            </div>

            @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { role = "form", id = "registerForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", placeholder = " " })
                    <label class="floating-label">Цело име</label>
                    @Html.ValidationMessageFor(m => m.FullName, "", new { @class = "validation-error" })
                </div>

                <div class="form-group">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = " ", type = "email" })
                    <label class="floating-label">Е-маил адреса</label>
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "validation-error" })
                </div>

                <div class="form-group">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = " ", id = "password" })
                    <label class="floating-label">Лозинка</label>
                    <span class="password-toggle" id="passwordToggle">
                        <i class="fas fa-eye"></i>
                    </span>
                    <div class="password-strength" id="passwordStrength">
                        <div class="password-strength-bar"></div>
                    </div>
                    <div class="password-requirements" id="passwordRequirements">
                        <div class="requirement" id="lengthReq">
                            <i class="fas fa-circle"></i> Најмалку 6 карактери
                        </div>
                        <div class="requirement" id="upperReq">
                            <i class="fas fa-circle"></i> Голема буква
                        </div>
                        <div class="requirement" id="numberReq">
                            <i class="fas fa-circle"></i> Број
                        </div>
                    </div>
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "validation-error" })
                </div>

                <div class="form-group">
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = " ", id = "confirmPassword" })
                    <label class="floating-label">Потврди лозинка</label>
                    <span class="password-toggle" id="confirmPasswordToggle">
                        <i class="fas fa-eye"></i>
                    </span>
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "validation-error" })
                </div>

                <button type="submit" class="btn-register">Регистрирај се</button>

                <div class="links">
                    Веќе имате сметка? @Html.ActionLink("Најавете се тука", "Login")
                </div>
            }
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const passwordToggle = document.getElementById('passwordToggle');
            const confirmPasswordToggle = document.getElementById('confirmPasswordToggle');
            const passwordStrength = document.getElementById('passwordStrength');
            const passwordRequirements = document.getElementById('passwordRequirements');

            // Toggle password visibility
            function setupPasswordToggle(input, toggle) {
                toggle.addEventListener('click', function() {
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    toggle.querySelector('i').classList.toggle('fa-eye');
                    toggle.querySelector('i').classList.toggle('fa-eye-slash');
                });
            }

            setupPasswordToggle(passwordInput, passwordToggle);
            setupPasswordToggle(confirmPasswordInput, confirmPasswordToggle);

            // Password strength meter
            passwordInput.addEventListener('input', function() {
                const password = passwordInput.value;
                let strength = 0;

                // Check password requirements
                const hasMinLength = password.length >= 6;
                const hasUpperCase = /[A-Z]/.test(password);
                const hasNumber = /[0-9]/.test(password);

                // Update requirement indicators
                document.getElementById('lengthReq').classList.toggle('met', hasMinLength);
                document.getElementById('upperReq').classList.toggle('met', hasUpperCase);
                document.getElementById('numberReq').classList.toggle('met', hasNumber);

                // Calculate strength
                if (hasMinLength) strength++;
                if (hasUpperCase) strength++;
                if (hasNumber) strength++;

                // Update strength meter
                passwordStrength.className = 'password-strength';
                if (password.length > 0) {
                    if (strength === 1) {
                        passwordStrength.classList.add('password-weak');
                    } else if (strength === 2) {
                        passwordStrength.classList.add('password-medium');
                    } else if (strength === 3) {
                        passwordStrength.classList.add('password-strong');
                    }
                }
            });
        });
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
</body>
</html>